#include <iostream>
#include <string> 
#include <cctype> 
using namespace std;
bool corr(const string& num) { //Функция для проверки строки на корректность (содержит только цифры)
    for (char gg : num) { //Проходим по каждому символу строки num
        if (!isdigit(gg)) {
            return false; //Если символ не является цифрой, то возвращаем false
        }
    }
    return true;
}
bool dlin(string& num1, string& num2) { //Функция для сравнения чисел по длине (если длина одинаковая, то сравниваются сами строки)
    if (num1.size() != num2.size())
    {
        return num1.size() > num2.size();
    }
    return num1 >= num2;
}
string vych(string& num1, string& num2) //Функция для вычитания чисел, представленных строками
{
    int l = num1.size(), k = num2.size(); //Длины строк
    string res = "";
    int a = 0; //Переменная, чтобы занять десяток у следующего разряда
    for (int i = 0; i < l; i++) //Проходим по каждому разряду, начиная с конца строки
    {
        int g = num1[l - 1 - i] - '0'; //Текущий разряд первого числа
        int m = 0;
        if (i < k)
        {
            m = num2[k - 1 - i] - '0'; //Текущий разряд второго числа
        }
        int f = g - m - a;
        if (f < 0) //Если результат вычитания отрицательный, то добавляем в переменную f + 10, чтобы заимствовать значение из следующего разряда и a = 1
        {
            f += 10;
            a = 1;
        }
        else
        {
            a = 0; //Если не требуется занимать десяток, то a = 0
        }

        res.push_back(f + '0'); //Добавляем результат текущего разряда в строку результата
    }
    while (res.size() > 1 and res.back() == '0') //Убираем ведущие нули
    {
        res.pop_back();
    }
    reverse(res.begin(), res.end()); //Переворачиваем число, так как мы проходили по каждому разряду с конца строки
    return res;
}
string ostat(string num1, string& num2) //Функция для вычисления остатка от деления одного числа на другое
{
    string t = ""; //Текущий остаток
    string o = "0"; //Результат
    for (char s : num1) //Проходим по каждому символу первого числа
    {
        t += s; //Добавляем символ к текущему остатку
        if (t[0] == '0' and t.size() > 1)

        {
            t.erase(t.begin()); //Убираем ведущие нули
        }
        while (dlin(t, num2)) //Пока t >= num2, из t вычитаем num2
        {
            t = vych(t, num2);
        }
    }
    o = t;
    if (o.empty()) { //Если t - пустое (остаток равен 0), o приравниваем к нулю
        o = "0";
    }
    return o;
}
string Evkl(string a, string b) //Функция реализует алгоритм Евклида для двух чисел
{
    while (b != "0") { //Пока b не равно 0, остаток от деления a на b вычисляем при помощи функции ostat
        string ost = ostat(a, b);
        a = b; //Меняем местами a и b
        b = ost;
    }
    return a; //Когда b становится раным 0, результат - значение a
}
string NOD(string& num1, string& num2, string& num3) //Функция NOD использует функцию Evkl для нахождения НОД сначала первых двух чисел, а затем результата с третьим
{
    string NOD12 = Evkl(num1, num2); //Находим НОД первых двух чисел
    return Evkl(NOD12, num3); //Находим НОД результата с третьим числом
}
string vvod(const string& p) { //Функция для проверки на корректность ввода числа
    string num;
    while (true) {
        cout << p;
        cin >> num;
        if (corr(num)) { //Проверяем строки на корректность
            return num;
        }
        else {
            cout << "Ошибка: вводить можно только цифры, попробуйте снова\n"; //Если строка содержит не только цифры, выдаётся ошибка
        }
    }
}
